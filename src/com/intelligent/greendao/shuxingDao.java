package com.intelligent.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SHUXING.
*/
public class shuxingDao extends AbstractDao<shuxing, Long> {

    public static final String TABLENAME = "SHUXING";

    /**
     * Properties of entity shuxing.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Shuxingcode = new Property(0, Long.class, "shuxingcode", true, "SHUXINGCODE");
        public final static Property Shuxingname = new Property(1, String.class, "shuxingname", false, "SHUXINGNAME");
        public final static Property Shuxingziduan = new Property(2, String.class, "shuxingziduan", false, "SHUXINGZIDUAN");
    };


    public shuxingDao(DaoConfig config) {
        super(config);
    }
    
    public shuxingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SHUXING' (" + //
                "'SHUXINGCODE' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: shuxingcode
                "'SHUXINGNAME' TEXT," + // 1: shuxingname
                "'SHUXINGZIDUAN' TEXT);"); // 2: shuxingziduan
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SHUXING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, shuxing entity) {
        stmt.clearBindings();
 
        Long shuxingcode = entity.getShuxingcode();
        if (shuxingcode != null) {
            stmt.bindLong(1, shuxingcode);
        }
 
        String shuxingname = entity.getShuxingname();
        if (shuxingname != null) {
            stmt.bindString(2, shuxingname);
        }
 
        String shuxingziduan = entity.getShuxingziduan();
        if (shuxingziduan != null) {
            stmt.bindString(3, shuxingziduan);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public shuxing readEntity(Cursor cursor, int offset) {
        shuxing entity = new shuxing( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // shuxingcode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shuxingname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // shuxingziduan
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, shuxing entity, int offset) {
        entity.setShuxingcode(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShuxingname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShuxingziduan(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(shuxing entity, long rowId) {
        entity.setShuxingcode(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(shuxing entity) {
        if(entity != null) {
            return entity.getShuxingcode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
