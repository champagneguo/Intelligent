package com.intelligent.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.intelligent.greendao.gxlb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GXLB.
*/
public class gxlbDao extends AbstractDao<gxlb, Long> {

    public static final String TABLENAME = "GXLB";

    /**
     * Properties of entity gxlb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Gxlbcode = new Property(0, Long.class, "gxlbcode", true, "GXLBCODE");
        public final static Property Gxlbname = new Property(1, String.class, "gxlbname", false, "GXLBNAME");
    };


    public gxlbDao(DaoConfig config) {
        super(config);
    }
    
    public gxlbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GXLB' (" + //
                "'GXLBCODE' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: gxlbcode
                "'GXLBNAME' TEXT);"); // 1: gxlbname
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GXLB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, gxlb entity) {
        stmt.clearBindings();
 
        Long gxlbcode = entity.getGxlbcode();
        if (gxlbcode != null) {
            stmt.bindLong(1, gxlbcode);
        }
 
        String gxlbname = entity.getGxlbname();
        if (gxlbname != null) {
            stmt.bindString(2, gxlbname);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public gxlb readEntity(Cursor cursor, int offset) {
        gxlb entity = new gxlb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gxlbcode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // gxlbname
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, gxlb entity, int offset) {
        entity.setGxlbcode(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGxlbname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(gxlb entity, long rowId) {
        entity.setGxlbcode(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(gxlb entity) {
        if(entity != null) {
            return entity.getGxlbcode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
