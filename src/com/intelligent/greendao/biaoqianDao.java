package com.intelligent.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.intelligent.greendao.biaoqian;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BIAOQIAN.
*/
public class biaoqianDao extends AbstractDao<biaoqian, Long> {

    public static final String TABLENAME = "BIAOQIAN";

    /**
     * Properties of entity biaoqian.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Biaoqianid = new Property(0, Long.class, "biaoqianid", true, "BIAOQIANID");
        public final static Property Biaoqiancode = new Property(1, String.class, "biaoqiancode", false, "BIAOQIANCODE");
        public final static Property Biaoqianleibie = new Property(2, String.class, "biaoqianleibie", false, "BIAOQIANLEIBIE");
        public final static Property Jingdu = new Property(3, String.class, "jingdu", false, "JINGDU");
        public final static Property Weidu = new Property(4, String.class, "weidu", false, "WEIDU");
    };


    public biaoqianDao(DaoConfig config) {
        super(config);
    }
    
    public biaoqianDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BIAOQIAN' (" + //
                "'BIAOQIANID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: biaoqianid
                "'BIAOQIANCODE' TEXT," + // 1: biaoqiancode
                "'BIAOQIANLEIBIE' TEXT," + // 2: biaoqianleibie
                "'JINGDU' TEXT," + // 3: jingdu
                "'WEIDU' TEXT);"); // 4: weidu
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BIAOQIAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, biaoqian entity) {
        stmt.clearBindings();
 
        Long biaoqianid = entity.getBiaoqianid();
        if (biaoqianid != null) {
            stmt.bindLong(1, biaoqianid);
        }
 
        String biaoqiancode = entity.getBiaoqiancode();
        if (biaoqiancode != null) {
            stmt.bindString(2, biaoqiancode);
        }
 
        String biaoqianleibie = entity.getBiaoqianleibie();
        if (biaoqianleibie != null) {
            stmt.bindString(3, biaoqianleibie);
        }
 
        String jingdu = entity.getJingdu();
        if (jingdu != null) {
            stmt.bindString(4, jingdu);
        }
 
        String weidu = entity.getWeidu();
        if (weidu != null) {
            stmt.bindString(5, weidu);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public biaoqian readEntity(Cursor cursor, int offset) {
        biaoqian entity = new biaoqian( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // biaoqianid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // biaoqiancode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // biaoqianleibie
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // jingdu
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // weidu
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, biaoqian entity, int offset) {
        entity.setBiaoqianid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBiaoqiancode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBiaoqianleibie(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJingdu(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeidu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(biaoqian entity, long rowId) {
        entity.setBiaoqianid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(biaoqian entity) {
        if(entity != null) {
            return entity.getBiaoqianid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
